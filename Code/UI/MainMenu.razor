@using System;
@using Sandbox;
@using Sandbox.UI;
@using System.Runtime.CompilerServices
@inherits PanelComponent
@namespace Sandbox

<root>
	<div class="header">
		<div class="title">Pong</div>
	</div>

	<div class="body">

		<div class="buttons">
			<div class="button play" onclick="@(() => OnPlay(true))">Play</div>
			<div class="button settings" onclick="@(() => OnSettings(true))">Settings</div>
			<div class="button quit" onclick="@(() => OnQuit())">Quit</div>
		</div>

		<div class="panel_background @(playVisible ? "" : "hidden")">

			<div class="panel">
				<div class="games">
					<div class="button" onclick="@(() => Scene.LoadFromFile("scenes/Lobby.scene"))">
						<img class="icon" src="" alt="p42"/>
						<label class="name">Pong for Two</label>
					</div>

					<div class="button">
						<img class="icon" src="" alt="p44"/>
						<label class="name">Pong for Four</label>
					</div>
				</div>
				

				<div class="button back" onclick="@(() => OnPlay(false))">Back</div>
			</div>

		</div>
		
		<div class="panel_background @(settingsVisible ? "" : "hidden")">

			<div class="panel">
				<div class="option color">
					<label class="option name">Paddle Color:</label>
					<div class="button" onclick="@(() => TogglePalette())">
						<div class="color @GameSettings.Color"></div>
					</div>					
				</div>

				<div class="option sens">
					@* <div class="button reset" onclick="@(() => { ResetSens(1.0f); })">R</div> *@
					<label class="option name">Sensitivity:</label>
					<div class="adjuster">
						<div class="option adjust" onclick=@(() => SetSens("decrement", 0.1f, 0.1f))>&#60;</div>
						<div class="option value">@Sensitivity</div>
						<div class="option adjust" onclick=@(() => SetSens("increment", 0.1f, 0.1f))>&#62;</div>
					</div>
				</div>
				
				<div class="button back" onclick="@(() => OnSettings(false))">Back</div>
			</div>

			<div class="palette @(paletteVisible ? "" : "hidden")">
				<div class="colors">
					<div class="color blue" onclick="@(() => PickColor("blue"))"></div>
					<div class="color green" onclick="@(() => PickColor("green"))"></div>
					<div class="color cyan" onclick="@(() => PickColor("cyan"))"></div>
					<div class="color red" onclick="@(() => PickColor("red"))"></div>
					<div class="color magenta" onclick="@(() => PickColor("magenta"))"></div>
					<div class="color brown" onclick="@(() => PickColor("brown"))"></div>
					@* <div class="color gray" onclick="@(() => PickColor("gray"))"></div>
					<div class="color lightblue" onclick="@(() => PickColor("lightblue"))"></div>
					<div class="color lightgreen" onclick="@(() => PickColor("lightgreen"))"></div>
					<div class="color lightcyan" onclick="@(() => PickColor("lightcyan"))"></div>
					<div class="color lightred" onclick="@(() => PickColor("lightred"))"></div>
					<div class="color lightmagenta" onclick="@(() => PickColor("lightmagenta"))"></div> *@
					@* <div class="color yellow" onclick="@(() => PickColor("yellow"))"></div> *@
					<div class="color white" onclick="@(() => PickColor("white"))"></div>
				</div>

				<div class="button back" onclick="@(() => TogglePalette())">Back</div>
			</div>

		</div>

	</div>
</root>

@code
{
	float Sensitivity = GameSettings.Sensitivity;
	bool playVisible = false;
	bool settingsVisible = false;
	bool paletteVisible = false;

	void OnPlay(bool setVisible)
	{
		if (settingsVisible) return;
		playVisible = setVisible;
	}

	void OnSettings(bool setVisible)
	{
		if (playVisible) return;
		settingsVisible = setVisible;
	}

	void TogglePalette()
	{
		if (paletteVisible)
			paletteVisible = false;
		else 
			paletteVisible = true;
	}

	void SetSens(string operation, float min, float step)
	{
		if (operation == "increment")
		{
			Sensitivity = MathF.Round(Math.Max(min, Sensitivity + step), 3);
			GameSettings.Sensitivity = Sensitivity;
		}
		else if (operation == "decrement")
		{
			Sensitivity = MathF.Round(Math.Max(min, Sensitivity - step), 3);
			GameSettings.Sensitivity = Sensitivity;
		}
	}

	void ResetSens(float value)
	{
		Sensitivity = value;
		GameSettings.Sensitivity = value;
	}

	void PickColor(string color)
	{
		GameSettings.Color = color;
		paletteVisible = false;
		Log.Info(GameSettings.Color);
	}

	void OnQuit()
	{
		Game.Close();
	}

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine( settingsVisible, playVisible, paletteVisible );
}
