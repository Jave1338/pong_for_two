@using System;
@using Sandbox;
@using Sandbox.UI;
@using System.Runtime.CompilerServices
@inherits PanelComponent
@namespace Sandbox

<root>
	<div class="header">
		<div class="title">Pong</div>
	</div>

	<div class="body">

		<div class="buttons">
			<div class="button play" onclick="@(() => OnPlay(true))">Play</div>
			<div class="button settings" onclick="@(() => OnSettings(true))">Settings</div>
			<div class="button quit" onclick="@(() => OnQuit())">Quit</div>
		</div>

		<div class="panel_background @(playVisible ? "" : "hidden")">

			<div class="panel">
				<div class="games">
					<div class="button" onclick="@(() => Scene.LoadFromFile("scenes/Lobby.scene"))">
						<img class="icon" src="" alt="p42"/>
						<label class="name">Pong for Two</label>
					</div>

					<div class="button">
						<img class="icon" src="" alt="p44"/>
						<label class="name">Pong for Four</label>
					</div>
				</div>
				
				<div class="palette">
					<div class="color"></div>
					<div class="color"></div>
					<div class="color"></div>
					<div class="color"></div>
					<div class="color"></div>
					<div class="color"></div>
					<div class="color"></div>
					<div class="color"></div>
					<div class="color"></div>
					<div class="color"></div>
					<div class="color"></div>
					<div class="color"></div>
					<div class="color"></div>
					<div class="color"></div>
					<div class="color"></div>
					<div class="color"></div>
				</div>

				<div class="button back" onclick="@(() => OnPlay(false))">
					<label class="back">Back</label>
				</div>
			</div>

		</div>
		
		<div class="panel_background @(settingsVisible ? "" : "hidden")">

			<div class="panel">
				<div class="option color">
					<label class="option name">Paddle Color:</label>
					<div class="adjuster">
						<label class="option adjust" onclick=>&#60;</label>
						<label class="option value">Value</label>
						<label class="option adjust" onclick=>&#62;</label>
					</div>
				</div>

				<div class="option sens">
					@* <div class="button reset" onclick="@(() => { ResetSens(ref Sensitivity, 1.0f); })">R</div> *@
					<label class="option name">Sensitivity:</label>
					<div class="adjuster">
						<div class="option adjust" onclick=@(() => SetSens("decrement", 0.1f, 0.1f))>&#60;</div>
						<div class="option value">@Sensitivity</div>
						<div class="option adjust" onclick=@(() => SetSens("increment", 0.1f, 0.1f))>&#62;</div>
					</div>
				</div>
				
				<div class="button back" onclick="@(() => OnSettings(false))">
					<label class="back">Back</label>
				</div>
			</div>

		</div>

	</div>
</root>

@code
{
	float Sensitivity = GameSettings.Sensitivity;
	bool playVisible = false;
	bool settingsVisible = false;

	void SetSens(string operation, float min, float step)
	{
		if (operation == "increment")
		{
			Sensitivity = MathF.Round(Math.Max(min, Sensitivity + step), 3);
			GameSettings.Sensitivity = Sensitivity;
		}
		else if (operation == "decrement")
		{
			Sensitivity = MathF.Round(Math.Max(min, Sensitivity - step), 3);
			GameSettings.Sensitivity = Sensitivity;
		}
	}

	void ResetSens(ref float variable, float value)
	{
		variable = value;
		GameSettings.Sensitivity = value;
	}

	void OnPlay(bool setVisible)
	{
		if (settingsVisible) return;
		playVisible = setVisible;
	}

	void OnSettings(bool setVisible)
	{
		if (playVisible) return;
		settingsVisible = setVisible;
	}
	void OnQuit()
	{
		Game.Close();
	}

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine( settingsVisible, playVisible );
}
